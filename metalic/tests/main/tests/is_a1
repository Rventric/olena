//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <mlc/bool.hh>
#include <mlc/is_a.hh>

using namespace mlc;

class A {};
class B : public A {};
class C : public B {};

template <class E> class T_A {};
template <class T> class T_B : public T_A<T> {};

template <class T>
void foo()
{
  is_false<mlc_is_a(int, bool)::ret>::ensure();
  is_true<mlc_is_a(B, A)::ret>::ensure();
  is_true<mlc_is_a(C, A)::ret>::ensure();
  is_false<mlc_is_a(A, B)::ret>::ensure();
}

int main()
{
  is_false<mlc_is_a_(int, bool)::ret>::ensure();
  is_true<mlc_is_a_(B, A)::ret>::ensure();
  is_true<mlc_is_a_(C, A)::ret>::ensure();
  is_false<mlc_is_a_(A, B)::ret>::ensure();

  is_true<mlc_is_a_(T_B<int>, T_A)::ret>::ensure();
  is_false<mlc_is_a_(T_A<int>, T_B)::ret>::ensure();

  foo<int>();
}
