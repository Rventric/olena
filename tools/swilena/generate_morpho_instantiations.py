#!/usr/bin/env python

import sys

files = []
dict_type_num = {1: "ntg_bin", 2: "ntg_int_u8", 3: "ntg_int_u32",
                 4: "ntg_int_s8", 5: "ntg_int_s32", 6: "ntg_float"}
dict_num_type = {"ntg_bin": 1, "ntg_int_u8": 2, "ntg_int_u32": 3,
                 "ntg_int_s8": 4, "ntg_int_s32": 5, "ntg_float": 6}

def close_files():
    for file in files:
	file.close()

def open_files(path):
    for dim in range(1, 2):
        for type in range(1, 7):
            str_type = dict_type_num[type]
            files.append(open(path + "/swilena_morpho%(dim)sd_%(str_type)s.i" % vars(), 'w'))

def write_headers():
    for dim in range(1, 2):
        for type in range(1, 7):
            str_type = dict_type_num[type]
            file = files[(dim - 1)* 6 + type - 1]
            file.write("""// Note: this file was generated by generate_morpho.py.

%%module swilena_morpho%(dim)sd_%(str_type)s

%%include swilena_exception.i

%%include swilena_ntg_macros.i
%%import swilena_ntg.i

%%include swilena_morpho.i

%%import swilena_image%(dim)sd.i

""" % vars())

def instantiate(idx, algorithm, *args):
    file = files[idx - 1]
    swilena_algorithm = "my_" + algorithm
    params = args[0]
    for param in args[1:]:
	params += ", " + param
    file.write(
	"%%template(%(algorithm)s) %(swilena_algorithm)s< %(params)s >;\n"
	% vars())

def write_algorithms():
    # Algorithms with all types and all dims
    for dim in range(1, 2):
	for type in [ "ntg_bin",
		      "ntg_int_u8", "ntg_int_u32",
		      "ntg_int_s8", "ntg_int_s32",
		      "ntg_float" ]:
	    img_type = "::oln::image%(dim)sd< %(type)s >" % vars()
	    win_type = "::oln::window%(dim)sd" % vars()
	    neighb_type = "::oln::neighborhood%(dim)sd" % vars()

            idx = (dim - 1) * 6 + dict_num_type[type]

	    # FIXME: these algorithms do not work with floats
            if type != "ntg_float":
		instantiate(idx, "erosion", img_type, img_type, win_type)
#FIXME

def main():
    if len(sys.argv) != 2:
	sys.stderr.write ("Usage: generate_morpho_instanciations.py path\n")
	sys.exit (1)
    else:
	path = sys.argv[1]
    open_files(path)
    write_headers()
    write_algorithms()
    close_files()

if __name__ == "__main__":
    main()
