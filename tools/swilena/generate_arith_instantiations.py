#!/usr/bin/env python

import sys

files = []

def close_files():
    for file in files:
	file.close()

def open_files(path):
    for dim in range(1, 2):
	files.append(open(path + "/swilena_arith%(dim)sd.i" % vars(), 'w'))

def write_headers():
    for dim in range(1, 2):
	file = files[dim - 1]
	file.write("""// Note: this file was generated by generate_arith.py.

%%module swilena_arith%(dim)sd

%%include swilena_exception.i
%%include swilena_ntg_macros.i
%%import swilena_ntg.i

%%include swilena_arith.i

%%import swilena_image%(dim)sd.i

decl_arith(%(dim)s)

""" % vars())

def instantiate(dim, algorithm, *args):
    file = files[dim - 1]
    swilena_algorithm = algorithm
    params = args[0]
    for param in args[1:]:
	params += ", " + param
    file.write(
	"%%template(%(algorithm)s) my_%(swilena_algorithm)s< %(params)s >;\n"
	% vars())

def get_bigger_type(type):
    traits = { "ntg_int_u8"  : "ntg_int_u32",
	       "ntg_int_u32" : "ntg_int_u32",
	       "ntg_int_s8"  : "ntg_int_s32",
	       "ntg_int_s32" : "ntg_int_s32" }
    if traits.has_key(type):
	return traits[type]
    return type

def write_algorithms():
    # Algorithms with all types and all dims
    for dim in range(1, 2):
	for type in [ "ntg_bin",
		      "ntg_int_u8", "ntg_int_u32",
		      "ntg_int_s8", "ntg_int_s32",
		      "ntg_float" ]:
	    img_type = "::oln::image%(dim)sd< %(type)s >" % vars()
	    bigger_type = get_bigger_type(type)
	    return_img_type = "::oln::image%(dim)sd< %(bigger_type)s >" % vars()

	    # FIXME: these algorithms do not work with bin
            if type != "ntg_bin":
		for algo in [ "plus", "minus", "times", "div" ]:
		    instantiate(dim, algo, return_img_type, img_type, img_type)

	    instantiate(dim, "min", return_img_type, img_type, img_type)
    	    instantiate(dim, "max", return_img_type, img_type, img_type)

def main():
    if len(sys.argv) != 2:
	sys.stderr.write ("Usage: generate_arith_instantiations.py path\n")
	sys.exit (1)
    else:
	path = sys.argv[1]
    open_files(path)
    write_headers()
    write_algorithms()
    close_files()

if __name__ == "__main__":
    main()
