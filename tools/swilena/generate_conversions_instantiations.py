#!/usr/bin/env python

# Copyright (C) 2003, 2004, 2006  EPITA Research and Development Laboratory
#
# This file is part of the Olena Library.  This library is free
# software; you can redistribute it and/or modify it under the terms
# of the GNU General Public License version 2 as published by the
# Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this library; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
#
# As a special exception, you may use this file as part of a free
# software library without restriction.  Specifically, if other files
# instantiate templates or use macros or inline functions from this
# file, or you compile this file and link it with other files to
# produce an executable, this file does not by itself cause the
# resulting executable to be covered by the GNU General Public
# License.  This exception does not however invalidate any other
# reasons why the executable file might be covered by the GNU General
# Public License.


import sys, os
import copyright

years = "2003, 2004, 2006"
files = []

def close_files():
    for file in files:
	file.close()

def open_files(path):
    for dim in range(1, 4):
	files.append(open(path + "/swilena_conversions%(dim)sd.i" % vars(), 'w'))

def write_headers(copyright_header):
    for dim in range(1, 4):
	file = files[dim - 1]
	file.write("""// Note: this file was generated by generate_conversions_instantiations.py.

""")
	file.writelines(copyright_header)
	file.write("""

%%module swilena_conversions%(dim)sd

%%include swilena_config.i

%%include swilena_exception.i

%%include swilena_ntg_macros.i
%%include swilena_image%(dim)sd.i
%%import swilena_ntg.i

%%include swilena_conversions.i

decl_conversions(%(dim)s)
""" % vars())

def instantiate(dim, algo, name, img_from, img_to):
    file = files[dim - 1]
    file.write("""
//
// %(img_from)s ==> %(img_to)s
//

%%newobject %(algo)s_to_%(name)s;

%%inline %%{
namespace oln {
  namespace convert {
  
    %(img_to)s &
    %(algo)s_to_%(name)s(const %(img_from)s& i)
    {
      typedef %(img_to)s::value_type to_value_type;
      return *new %(img_to)s(oln::apply(oln::convert::%(algo)s< to_value_type >(), i));
    }
   }
}
%%}
""" % vars())

def get_name(type):
    # Remove the ntg_ prefix
    return type[4:]

def write_algorithms():
    reduce_relations = [ ("ntg_int_u32", "ntg_int_u8"),
 			 ("ntg_int_s32", "ntg_int_s8") ]

    # FIXME: no conversions from float are available
    
    # Note: no conversion to bin available, one should use a threshold
    # instead.

    integer_types = [ "ntg_int_u8", "ntg_int_u32",
		      "ntg_int_s8", "ntg_int_s32" ]

    scalar_types = integer_types + [ "ntg_float" ]

    # Algorithms with all types and all dims
    for dim in range(1, 4):
	# stretch, bound and force
	for relation in reduce_relations:	    
	    for algo in ["stretch", "bound"]:
		from_type = relation[0]
		to_type = relation[1]
		from_img = "::oln::image%(dim)sd< %(from_type)s >" % vars()
		to_img = "::oln::image%(dim)sd< %(to_type)s >" % vars()
		instantiate(dim, algo, get_name(to_type), from_img, to_img)

	for from_type in scalar_types:
	    for to_type in scalar_types:
		if from_type != to_type:
		    from_img = "::oln::image%(dim)sd< %(from_type)s >" % vars()
		    to_img = "::oln::image%(dim)sd< %(to_type)s >" % vars()
		    instantiate(dim, "cast", get_name(to_type),
				from_img, to_img)

	for to_type in scalar_types:
	    from_type = "ntg_bin"
	    from_img = "::oln::image%(dim)sd< %(from_type)s >" % vars()
	    to_img = "::oln::image%(dim)sd< %(to_type)s >" % vars()
	    instantiate(dim, "cast", get_name(to_type),
			from_img, to_img)

	for from_type in integer_types:
	    to_type = "ntg_bin"
	    from_img = "::oln::image%(dim)sd< %(from_type)s >" % vars()
	    to_img = "::oln::image%(dim)sd< %(to_type)s >" % vars()
	    instantiate(dim, "cast", get_name(to_type),
			from_img, to_img)
	    

def main():
    if len(sys.argv) != 2:
	sys.stderr.write ("Usage: generate_conversions_instantiations.py path\n")
	sys.exit (1)
    else:
	path = sys.argv[1]
    open_files(path)
    copyright_header = \
      copyright.notice(os.path.join(path, "copyright.template"), years)
    write_headers(copyright_header)
    write_algorithms()
    close_files()
        
if __name__ == "__main__":
    main()
