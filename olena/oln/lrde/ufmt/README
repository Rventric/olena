		-*- outline -*-



* basic_maxtree

** features

union-find
p as point2d
p are sorted
par as image<point2d>
isproc as image
level compression
loop is "for all p"

** anti-features

level compression is not finalized (is not _total_)
no auxiliary parent data with full (tree) compression to speed-up find_root
no outer virtual border

** permanent changes

except for this version, we now always perform the following
optimizations

*** isproc
nbh is splitted into pre and post
so isproc is no more aux data
2 functions: isproc_pre and isproc_post
benefit: memory saving

*** node/levroot counting
during the compression
benefit: we need to know nnodes before the 2nd pass
without introducing an intermediate pass



* algorithms deriving from basic_maxtree


** browsing

*** s
when quantization is high
std::sort
browsing is:
| for all p taken with f(p) decreasing
|   union-find

*** h
when quantization is low
counting sort
browsing is:
| for all h
|   for all p fwd s.a. f(p) = h
|     union-find
|   for all p bkd s.a. f(p) = h
|     compression
benefit: usually faster thanx to compression

*** r
raster (classic video scan)
no sorting
browsing is:
| for all p fwd
|   union-find
benefit: incremental, card(nbh)/2
use: insert (p->tree) and update (tree is in/out)


** point encoding

*** p
point = point2d = (int, int)
par[p] = point2d

*** i
point = int
par[p] = point

*** d
point = index = int
dpar[p] = delta point = delta index = int
benefit: make_sets() = memset(dpar, 0)


** compression

*** c
level-compression of par (resp. dpar)
find_root = loop over find_level_root

*** x
use of aux data: c_par (resp. c_dpar)
for full compressed access to root
find_root = quicker


** further (later) optims

virtual border...


** status

hpc  impled
hpx  impled
rpc  impled

hdc  impled
hdx  impled

r1ic do not compile (ric specialized for 1D images)


* basic_salembier

flooding
p as point2d
father as map<pair,pair>



* fiorio
Max-tree computation based on Fiorio's and Gustedt's labelling
algorithm.

** fiorio-1.hh
My (Roland) first implementation of the max-tree computation using
Fiorio's and Gustedt's algorithm.

** fiorio-2.hh
My second implementation of the max-tree computation using Fiorio's and
Gustedt's algorithm, using routines of Théo's (anc, insert, etc.)
