//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include "data.hh"
#include <oln/utils/md5.hh>

#include "check.hh"
#include <oln/basics2d.hh>
#include <oln/convol/fast_gaussian.hh>
#include <oln/core/behavior.hh>
#include <ntg/all.hh>

int main()
{
  oln::utils::key::value_type   data_key[16] = {0x0, 0x8f, 0x63, 0xff, 0xca,
						0xae, 0xb5, 0xdb, 0x32, 0xf5,
						0x38, 0xfd, 0x13, 0x11, 0x67,
						0x9c};

  oln::utils::key		   key(data_key);

  typedef oln::image2d<ntg::int_u8>	im_type;
  im_type	im1(oln::load(rdata("lena256.pgm")));

  if (oln::utils::md5(oln::convol::fast::gaussian_derivative(im1,
							     0.5,
							     oln::value_behavior<oln_value_type_(im_type)>(0)))
      == key)
    std::cout << "OK" << std::endl; // XFAIL
  else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }

  return 0;
 }
