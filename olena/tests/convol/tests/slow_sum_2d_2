//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <oln/basics2d.hh>
#include <oln/convol/slow_convolution.hh>

#include <oln/level/compare.hh>

#include <iostream>
using std::cout;
using std::endl;

#include "check.hh"
#include "data.hh"

using namespace oln;
using namespace mlc;
using namespace ntg;

#define OK_OR_FAIL				\
      std::cout << "OK" << std::endl;		\
    else					\
      {						\
	std::cout << "FAIL" << std::endl;	\
	fail = true;				\
      }


bool
check(void)
{
  bool fail = false;

  image2d<int_u8> img = load(rdata("random.pgm"));
  cout << "=== Image ===" << endl << endl << img << endl;

  cout << "=== Convolution kernel ===" << endl << endl
       << "1 1 1" << endl
       << "1 1 1" << endl
       << "1 1 1" << endl
       << endl;

  image2d< int_s< 10 > > ret;

  //
  // Second way to do it, using meta-arrays.
  //

  ret = convol::slow::convolve<int_s< 10 > >(img, (ints_2d =
				     1, 1, 1, lbrk,
				     1, x(1), 1,
				     1, 1, 1, end));

  cout << "=== Result image (by convolve(array2d)) ===" << endl << endl
       << ret << endl;

  image2d< int_u8 > res_img = load(srcdir + "/sum_on_random.pgm");
  if (level::is_equal(ret, res_img))
    OK_OR_FAIL;

   return fail;
}
