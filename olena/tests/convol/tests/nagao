//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <oln/convol/nagao.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

// There is a problem with the way of testing this algorithm.  Md5
// will not return the same result since nagao result may differ a
// little bit depending on the machine used (float).
int main()
{
  bool fail (false);
  oln::utils::key::value_type data_key_c[16]
    = {0x69, 0xa7, 0xce, 0xf0, 0x4b, 0x88, 0x9e, 0xd4, 0x77, 0x63, 0x40,
       0xd6, 0x79, 0x42, 0x6a, 0x48};
  oln::image2d<ntg::rgb_8> imc = oln::load(rdata("lena.ppm"));
  oln::image2d<ntg::rgb_8> nc = oln::convol::nagao(imc);

  std::cout << oln::utils::md5(nc) << std::endl;
  fail = fail | (oln::utils::md5(nc) != oln::utils::key(data_key_c));

  oln::utils::key::value_type data_key_g[16]
    = {0x27, 0xbc, 0xab, 0x48, 0x45, 0x2f, 0xe9, 0xc5, 0x6e, 0x2e, 0x57,
       0x27, 0xf, 0x80, 0xfe, 0xaa};

   oln::image2d<ntg::int_u8> im = oln::load(rdata("lena256.pgm"));
   oln::image2d<ntg::int_u8> ng = oln::convol::nagao(im);

   fail = fail | (oln::utils::md5(ng) != oln::utils::key(data_key_g));
   if (!fail)
     {
       std::cout << "OK" << std::endl;
       return true; // XFAIL
     }
   else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }
}

