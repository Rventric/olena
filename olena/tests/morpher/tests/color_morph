//                                                                  -*- c++ -*-
#include <oln/morpher/color_morpher.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

int main()
{
  bool fail (false);
  oln::utils::key::value_type data_key_c_r[16]
    = {0xe1, 0x5, 0x51, 0x40, 0xea, 0xa, 0x13, 0x96,
       0xc7, 0xa6, 0x62, 0x2c, 0xfa, 0xe4, 0x53, 0x8e};

  oln::utils::key::value_type data_key_c_b[16]
    = {0x7, 0x8e, 0x3, 0xaa, 0x45, 0xce, 0x38, 0x62,
       0xf9, 0x1d, 0xb7, 0x9f, 0x56, 0x1c, 0x52, 0x2d};

  oln::utils::key::value_type data_key_c_g[16]
    = {0x50, 0x36, 0xf3, 0xb3, 0x56, 0x66, 0x18, 0xbc,
       0x7a, 0x12, 0x36, 0x75, 0xc, 0x7f, 0xc6, 0xf4};


  oln::image2d<ntg::rgb_8> imc = oln::load(rdata("lena.ppm"));
  const oln::image2d<ntg::rgb_8> imc_const = oln::load(rdata("lena.ppm"));
  oln::image2d<ntg::rgb_8> imd(imc.size());
  oln::morpher::color_morpher<oln::image2d<ntg::rgb_8> > mimc(imc, 0);
  oln::morpher::color_morpher<oln::image2d<ntg::rgb_8> > mimd(imd, 0);

  mimd = mimc;

  fail = fail | (oln::utils::md5(oln::morpher::rmorph(imc)) != oln::utils::md5(mimd));
  fail = fail | (oln::utils::md5(oln::morpher::rmorph(imc)) != oln::utils::key(data_key_c_r));
  fail = fail | (oln::utils::md5(oln::morpher::gmorph(imc)) != oln::utils::key(data_key_c_g));
  fail = fail | (oln::utils::md5(oln::morpher::bmorph(imc)) != oln::utils::key(data_key_c_b));
  fail = fail | (oln::utils::md5(oln::morpher::rmorph(imc_const)) != oln::utils::key(data_key_c_r));
  fail = fail | (oln::utils::md5(mimd) != oln::utils::md5(mimc));
  fail = fail | (oln::utils::md5(oln::morpher::rmorph(imc).unmorph()) != oln::utils::key(data_key_c_r));


  if (!fail)
    std::cout << "OK" << std::endl;
  else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }
}

