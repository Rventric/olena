//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <oln/morpher/subq_morpher.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

int main()
{
  bool fail (false);
  oln::utils::key::value_type data_key_c_1[16]
    = {0xae, 0xb0, 0x65, 0x65, 0xdd, 0x28, 0x5a, 0xc6,
       0x8a, 0x17, 0x7e, 0xd, 0xe5, 0xe6, 0x4f, 0x1d};

  oln::utils::key::value_type data_key_c_2[16]
    = {0x4, 0x58, 0x8b, 0x60, 0x31, 0x5b, 0x33, 0x4e,
       0xac, 0xad, 0x85, 0x18, 0x6, 0x25, 0xb6, 0x36};

  oln::utils::key::value_type data_key_c_3[16]
    = {0xd1, 0xcc, 0xe6, 0x1f, 0xec, 0x26, 0x2b, 0xfd,
       0x2b, 0x9c, 0xea, 0x59, 0x35, 0x76, 0x64, 0x8};

  oln::utils::key::value_type data_key_c_4[16]
    = {0xcf, 0x42, 0xc, 0x2f, 0xcb, 0x8e, 0x2a, 0x36,
       0xb9, 0x53, 0xcc, 0x42, 0xfc, 0x54, 0x27, 0x82};

  oln::utils::key::value_type data_key_c_5[16]
    = {0x90, 0xe5, 0x71, 0x6b, 0x7e, 0x15, 0x51, 0x16,
       0x43, 0x43, 0xa6, 0x81, 0x9e, 0x48, 0x88, 0xea};

  oln::utils::key::value_type data_key_c_6[16]
    = {0xc3, 0x7e, 0x14, 0xc7, 0x5d, 0xfc, 0xa7, 0xd9,
       0xc, 0xd7, 0x29, 0xa5, 0x84, 0x41, 0xfd, 0x12};

  oln::utils::key::value_type data_key_c_7[16]
    = {0x62, 0xa7, 0x2a, 0x3e, 0xe, 0x39, 0xda, 0x93,
       0x62, 0x59, 0x15, 0xe6, 0x60, 0x12, 0x8a, 0xc2};

  oln::utils::key::value_type data_key_c_8[16]
    = {0x47, 0xa5, 0xb6, 0xa2, 0xc8, 0xf1, 0x4d, 0xb8,
       0x90, 0x67, 0xaa, 0x19, 0x3d, 0x43, 0xb6, 0xe0};

  oln::image2d<ntg::rgb_8> imc = oln::load(rdata("lena.ppm"));
  const oln::image2d<ntg::rgb_8> imc_const = oln::load(rdata("lena.ppm"));

  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<1>(imc)) != oln::utils::key(data_key_c_1));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<2>(imc)) != oln::utils::key(data_key_c_2));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<3>(imc)) != oln::utils::key(data_key_c_3));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<4>(imc)) != oln::utils::key(data_key_c_4));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<5>(imc)) != oln::utils::key(data_key_c_5));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<6>(imc)) != oln::utils::key(data_key_c_6));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<7>(imc)) != oln::utils::key(data_key_c_7));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<8>(imc)) != oln::utils::key(data_key_c_8));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<1>(imc_const)) != oln::utils::key(data_key_c_1));
  fail = fail | (oln::utils::md5(oln::morpher::sqmorph<3>(oln::morpher::sqmorph<5>(imc))) !=
		 oln::utils::md5(oln::morpher::sqmorph<3>(imc)));

  if (!fail)
    std::cout << "OK" << std::endl;
  else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }
}
