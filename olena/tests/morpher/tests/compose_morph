//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <oln/morpher/color_morpher.hh>
#include <oln/morpher/subq_morpher.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

int main()
{
  bool fail (false);
  oln::utils::key::value_type data_key_c[16]
    = {0x18, 0x25, 0x3a, 0xc8, 0x64, 0xbd, 0x38, 0xa8,
       0x57, 0x24, 0x7d, 0x0, 0x62, 0xa9, 0xd1, 0x8d};

  oln::image2d<ntg::rgb_8> imc = oln::load(rdata("lena.ppm"));

  fail = fail | (oln::utils::md5(oln::morpher::rmorph(oln::morpher::sqmorph<7>(imc))) != oln::utils::key(data_key_c));

  if (!fail)
    std::cout << "OK" << std::endl;
  else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }
}

