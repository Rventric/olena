//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <oln/morpher/slicing_morpher.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

// Try to read from the morpher.
template <class E, class F>
void foo(const oln::abstract::image<E>& src, oln::abstract::image<F>& dst)
{
  oln_iter_type(oln::abstract::image<E>) it(src);
  for_all(it)
      dst[it] = src[it];
}


int main(int argc, char *argv[])
{
  bool fail (false);

  oln::utils::key::value_type data_key[16]
    = {0xc1, 0x3a, 0x47, 0xb, 0x6f, 0xff, 0xac, 0x97,
       0xab, 0xa0, 0xf, 0x6c, 0x2a, 0x4a, 0xcb, 0x1};

  oln::image2d<ntg::rgb_8> im = oln::load(rdata("lena.ppm"));
  const oln::image2d<ntg::rgb_8> im_const = oln::load(rdata("lena.ppm"));
  oln::image1d<ntg::rgb_8> im_out(im.ncols());
  oln::image1d<ntg::rgb_8> im_const_out(im_const.ncols());

  foo(oln::morpher::slicing_morph(im, 5), im_out);
  foo(oln::morpher::slicing_morph(im_const, 5), im_const_out);

  std::cout << oln::utils::md5(im_const_out) << std::endl;
  fail = fail | (oln::utils::md5(im_out) != oln::utils::md5(im_const_out));
  fail = fail | (oln::utils::md5(im_const_out) != oln::utils::key(data_key));

  if (!fail)
    std::cout << "OK" << std::endl;
  else
  {
    std::cout << "FAIL" << std::endl;
    return true;
  }
}
