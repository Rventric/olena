//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <oln/morpher/border_morpher.hh>
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/utils/md5.hh>
#include "data.hh"
#include "check.hh"

// Try to read from the morpher.
template <class E, class F>
void foo(const oln::abstract::image<E>& src, oln::abstract::image<F>& dst)
{
  oln_iter_type(oln::abstract::image<E>) it(dst);
  for_all(it)
    dst[it] = src[it];
}

// Try to write inside the morpher.
template <class E, class F>
void foo(oln::abstract::image<E>& src, oln::abstract::image<F>& dst)
{
  oln_iter_type(oln::abstract::image<E>) it_src(dst);

  for_all(it_src)
    src[it_src] = dst[it_src];
}

int main()
{
  bool fail (false);

  oln::utils::key::value_type data1_key[16] =
    {0x5b, 0x8c, 0xd9, 0x41, 0xc6, 0x62, 0x58, 0x34, 0xff,
     0x4c, 0x4, 0x8, 0x33, 0xf2, 0x95, 0xd7};
  oln::utils::key::value_type data2_key[16] =
    {0x5a, 0xd1, 0xac, 0x80, 0xec, 0xbd, 0x17, 0x96, 0xad,
     0x12, 0xec, 0xe7, 0x2b, 0xa5, 0x50, 0xa2};


  oln::coord delta = 10;
  oln::image2d<ntg::rgb_8> im = oln::load(rdata("lena.ppm"));
  const oln::image2d<ntg::rgb_8> im_const = oln::load(rdata("lena.ppm"));
  oln::image2d<ntg::rgb_8> im_out(oln::image2d_size(im.size().nrows() + 2*delta,
						    im.size().ncols() + 2*delta, im.border()));
  oln::image2d<ntg::rgb_8> im_const_out(oln::image2d_size(im.size().nrows() + 2*delta,
						    im.size().ncols() + 2*delta, im.border()));

  oln::morpher::border_morpher< oln::image2d<ntg::rgb_8>, oln::mirror_behavior<> > im_nonconst_out(im, delta, oln::mirror_bhv());

  foo(im_nonconst_out, im);
  foo(oln::morpher::border_morph(im, delta, oln::mirror_bhv()), im_out);
  foo(oln::morpher::border_morph(im_const, delta, oln::mirror_bhv()), im_const_out);

  fail = fail | (oln::utils::md5(im_const_out) != oln::utils::key(data2_key));
  fail = fail | (oln::utils::md5(im_out) != oln::utils::key(data1_key));

  if (!fail)
    std::cout << "OK" << std::endl;
  else
  {
    std::cout << "FAIL" << std::endl;
    return true;
  }
}
