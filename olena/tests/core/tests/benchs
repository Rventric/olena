//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <iostream>

#include <oln/basics1d.hh>
#include <oln/basics2d.hh>
#include <oln/basics3d.hh>

#include <oln/utils/timer.hh>

#include <ntg/all.hh>

using namespace oln;
using namespace ntg;

template <class I>
void abstract_fill_image(abstract::image<I>& ima)
{
  oln_iter_type(I) p (ima.exact());
  for_all(p)
    ima[p] = p.row() + p.col();
}

template <class I>
void concrete_fill_image(I& ima)
{
  oln_iter_type(I) p (ima);
  for_all(p)
    ima[p] = p.row() + p.col();
}

int main()
{
  oln::image2d<int_u32> ima(10000, 10000);
  oln::utils::timer t;
  t.start();
  abstract_fill_image(ima);
  t.stop();
  std::cout << "With abstract: " << t.total_time() << std::endl;
  t.restart();
  concrete_fill_image(ima);
  t.stop();
  std::cout << "With concrete: " << t.total_time() << std::endl;
}
