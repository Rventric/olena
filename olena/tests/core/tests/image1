//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <iostream>

#include <oln/basics1d.hh>
#include <oln/basics2d.hh>
#include <oln/basics3d.hh>

#include <ntg/all.hh>

int main()
{
  oln::image1d<ntg::int_u8> ima1(4);
  ima1(1) = 7;
  oln::image1d<ntg::int_u8>::iter_type it1(ima1);
  ima1[it1] = 8;
  oln::image1d<ntg::int_u8> ima12;
  ima12 = ima1;
  std::cout << ima1 << std::endl;
  assertion(ima1.ncols() == 4);

  oln::image2d<ntg::int_u8> ima2(2, 3);
  ima2(1, 0) = 7;
  oln::image2d<ntg::int_u8>::iter_type it2(ima2);
  ima2[it2] = 8;
  oln::image2d<ntg::int_u8> ima22;
  ima22 = ima2;
  std::cout << ima22 << std::endl;
  assertion( ima2.nrows() == 2 );
  assertion( ima2.ncols() == 3 );

  oln::image3d<ntg::int_u8> ima3(4, 2, 3);
  ima3(1, 0, 1) = 7;
  oln::image3d<ntg::int_u8> ima32;
  ima32 = ima3;
  assertion( ima3.nslices() == 4 );
  assertion( ima3.nrows() == 2 );
  assertion( ima3.ncols() == 3 );

  oln::image3d<ntg::int_u8> ima4(ima3);
  oln::image3d<ntg::int_u8>::iter_type it3(ima4);
  //for_all(it)
  ima4[it3] = 6;

  //ima3 = ima4;
  std::cout << ima32 << std::endl;
}
