//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


// EDOC == Erosion Dilation Opening Closing.
// Compare the morpho::fast:: and morpho:: versions.

#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/morpho/erosion.hh>
#include <oln/morpho/dilation.hh>
#include <oln/morpho/opening.hh>
#include <oln/morpho/closing.hh>
#include <oln/morpho/hit_or_miss.hh>
#include <oln/morpho/top_hat.hh>

#include <oln/level/compare.hh>

#include "check.hh"
#include "data.hh"

using namespace oln;
using namespace ntg;

#define OK_OR_FAIL				\
      std::cout << "OK" << std::endl;		\
    else					\
      {						\
	std::cout << "FAIL" << std::endl;	\
	fail = true;				\
      }

template <class I>
bool
check_bin_or_int_u8(const oln::image2d<I> &lena)
{
  bool fail = false;

  std::cout << "erosion ... " << std::flush;
  if (level::is_equal(morpho::erosion(lena, win_c4p()),
		      morpho::fast::erosion(lena, win_c4p())))
    OK_OR_FAIL;

    std::cout << "dilation ... " << std::flush;
  if (level::is_equal(morpho::dilation(lena, win_c4p()),
		      morpho::fast::dilation(lena, win_c4p())))
    OK_OR_FAIL;
  std::cout << "opening ... " << std::flush;
  if (level::is_equal(morpho::opening(lena, win_c4p()),
		      morpho::fast::opening(lena, win_c4p())))
    OK_OR_FAIL;
  std::cout << "closing ... " << std::flush;
  if (level::is_equal(morpho::closing(lena, win_c4p()),
		      morpho::fast::closing(lena, win_c4p())))
    OK_OR_FAIL;

  std::cout << "closing ... " << std::flush;
  if (level::is_equal(morpho::closing(lena, win_c4p()),
		      morpho::fast::closing(lena, win_c4p())))
    OK_OR_FAIL;

  //FIXME: value are only tested indirectly (this function is tested by
  // fast::erosion and fast::dilatation).
  oln::morpho::fast_morpho<oln::image2d<I>, oln::window2d, oln::utils::histogram_min<I> >
    (lena, oln::win_c4p());

  oln::window2d mywin;
  mywin
    .add(-3,-2).add(-3,-1).add(-3,0).add(-3,1).add(-3,2)
    .add(-2,-1).add(-2,0).add(-2,1)
    .add(-1,0);
  oln::window2d mywin2 = - mywin;

  std::cout << "hit_or_miss ... " << std::flush;
  if (level::is_equal(morpho::hit_or_miss(oln::convert::bound<ntg::int_u8>(),
					  lena, mywin, mywin2),
		      morpho::fast::hit_or_miss(oln::convert::bound<ntg::int_u8>(),
						lena, mywin, mywin2)))
    OK_OR_FAIL;

  return fail;
}

bool
check()
{
  bool fail = false;

  image2d<int_u8> lena(rdata("lena128.pgm"));
  std::cout << "int_u8..." << std::flush;

  if (!check_bin_or_int_u8(lena))
      OK_OR_FAIL;

  std::cout << "top hat contrast ... " << std::flush;
  if (level::is_equal(morpho::top_hat_contrast_op(lena, win_c4p()),
		      morpho::fast::top_hat_contrast_op(lena, win_c4p())))
    OK_OR_FAIL;

  image2d<bin> obj(rdata("object.pbm"));
  std::cout << "bin..." << std::flush;
  if (!check_bin_or_int_u8(obj))
    OK_OR_FAIL;

  return fail;
}
