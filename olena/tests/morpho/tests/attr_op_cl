//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include <oln/basics2d.hh>
#include <oln/morpho/attribute_closing_opening.hh>
#include <oln/morpho/attribute_closing_opening_map.hh>
#include <oln/level/compare.hh>
#include <ntg/all.hh>

#include "check.hh"
#include "data.hh"

using namespace oln;
using namespace ntg;

#define OK_OR_FAIL				\
      std::cout << "OK" << std::endl;		\
    else					\
      {						\
	std::cout << "FAIL" << std::endl;	\
	fail = true;				\
      }

# define test_op_cl(T, A, im, lambda) \
{ \
  bool	last_fail = fail; \
  fail = false; \
  { \
    image2d<T> im2 = oln::morpho::slow::A##_opening(im, neighb_c4(), lambda); \
    image2d<T> im1 = oln::morpho::fast::A##_opening(im, neighb_c4(), lambda); \
    image2d<T>::iter_type	it(lena); \
    std::cout << #A << " opening: "; \
    for_all(it) \
      { \
	if (im1[it] != im2[it]) \
          fail = true; \
      } \
    if (!fail) \
      OK_OR_FAIL \
  } \
  last_fail = last_fail || fail; \
  fail = false; \
  { \
    image2d<T> im2 = oln::morpho::slow::A##_closing(im, neighb_c4(), lambda); \
    image2d<T> im1 = oln::morpho::fast::A##_closing(im, neighb_c4(), lambda); \
    image2d<T>::iter_type	it(lena); \
    std::cout << #A <<" closing: "; \
    for_all(it) \
      { \
	if (im1[it] != im2[it]) \
          fail = true; \
      } \
    if (!fail) \
      OK_OR_FAIL \
  } \
 fail = last_fail || fail; \
}


bool
check()
{
  bool fail = false;

  image2d<int_u8> lena(rdata("lena.pgm"));
  std::cout << std::endl;
  test_op_cl(int_u8, card, lena, 200);
  test_op_cl(int_u8, integral, lena, 200);
  test_op_cl(int_u8, height, lena, 4);
  test_op_cl(int_u8, maxvalue, lena, 100);
  test_op_cl(int_u8, minvalue, lena, 100);
  //  test_op_cl(int_u8, dist, lena, 100); FIXME: doesn't work.
  test_op_cl(int_u8, ball, lena, 100);
  test_op_cl(int_u8, cube, lena, 50);

  ntg::vec<2, unsigned, mlc::final>	lambda;
  lambda[0] = lambda[1] = 50;
  test_op_cl(int_u8, box, lena, lambda);

  return fail;
}
