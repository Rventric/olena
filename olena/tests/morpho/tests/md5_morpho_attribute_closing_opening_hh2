//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include "data.hh"
#include <oln/utils/md5.hh>

#include "check.hh"
#include <oln/basics2d.hh>
#include <oln/morpho/attribute_closing_opening.hh>
#include <oln/morpho/attribute_closing_opening_map.hh>
#include <oln/level/compare.hh>
#include <ntg/all.hh>

int main()
{
  oln::utils::key::value_type   data_key[16] = {0xf6, 0x87, 0xb9, 0xf, 0xde,
						0x31, 0x62, 0xfd, 0xd7, 0xb,
						0xa4, 0x19, 0x26, 0x3, 0x7,
						0xa4};

  oln::utils::key			key(data_key);
  bool					res(false);
  typedef oln::image2d<ntg::int_u8>	im_type;

  im_type im(oln::load(rdata("lena128.pgm")));
  im_type im1;
  im_type im2;
  oln::morpho::env::OtherImageEnv<im_type>	env(im);

  im1 = oln::morpho::fast::volume_closing(im, oln::neighb_c4(), 200, env);
  im2 = oln::morpho::slow::volume_closing(im, oln::neighb_c4(), 200, env);

  if (oln::utils::md5(im1) == key)
    std::cout << "fast: OK" << std::endl;
  else
    {
      std::cout << "fast: FAIL" << std::endl;
      res =  true;
    }
  if (oln::utils::md5(im2) == key)
    std::cout << "slow: OK" << std::endl;
  else
    {
      std::cout << "slow: FAIL" << std::endl;
      res =  true;
    }

  return  res;
}
