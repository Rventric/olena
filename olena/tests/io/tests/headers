//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.


#include "loadsave.hh"

#include <fstream>
#include <sstream>

template <class T>
bool check_type()
{
  image2d<T> ima (5, 5);
  io::save(ima, "headers.pgm");

  // Read the actual maximal value in the header of the written file
  std::fstream f ("headers.pgm");
  assert(f);
  std::string line;
  for (unsigned i = 0; i < 4; ++i)
    std::getline(f, line);
  f.close();

  // It should be the same value as ntg_max_val(T)
  std::istringstream s (line);
  unsigned value;
  s >> value;
  return value != ntg_max_val(T);
}

bool
check(void)
{
  bool fail = false;

  fail |= check_type<int_u8>();
  fail |= check_type<int_u16>();

  return fail;
}
