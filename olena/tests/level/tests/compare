//                                                                  -*- c++ -*-
// Copyright (C) 2002, 2003, 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <ntg/int.hh>
#include <oln/basics2d.hh>
#include <oln/level/fill.hh>
#include <oln/level/compare.hh>
#include <iostream>
#include "check.hh"
#include "data.hh"

using namespace oln;
using namespace mlc;
using namespace ntg;

#define OK_OR_FAIL				\
      std::cout << "OK" << std::endl;		\
    else					\
      {						\
	std::cout << "FAIL" << std::endl;	\
	fail = true;				\
      }

#define ASSERT_CHECK(Val) { assert_check(Val, #Val, fail); }

void assert_check(bool res, const std::string& desc, bool &fail)
{
  std::cout << "---- " << desc << " ----" << std::endl;
  if (res)
    OK_OR_FAIL;
}


bool
check(void)
{
  bool fail = false;

  image2d<int_u8>
    im_0(16, 16),
    im_20(16, 16);
  level::fill(im_0, 0);
  level::fill(im_20, 20);

  ASSERT_CHECK(level::is_greater(im_20, im_0));
  ASSERT_CHECK(!level::is_greater(im_0, im_20));
  ASSERT_CHECK(level::is_greater_or_equal(im_0, im_0));

  ASSERT_CHECK(level::is_lower(im_0, im_20));
  ASSERT_CHECK(!level::is_lower(im_20, im_0));
  ASSERT_CHECK(level::is_lower_or_equal(im_0, im_0));

  ASSERT_CHECK(level::is_equal(im_0, im_0));
  return fail;
}
