//                                                                  -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include "data.hh"
#include <oln/utils/md5.hh>

#include "check.hh"
#include <oln/basics2d.hh>
#include <oln/level/set_level.hh>
#include <ntg/all.hh>

int main()
{
  oln::utils::key::value_type   data_key[16] = {0xdd, 0x90, 0x28, 0xf1, 0xd2,
						0x6f, 0xd3, 0xfb, 0x64, 0x60,
						0x80, 0xaa, 0x11, 0xbc, 0x3e,
						0xd6};

  oln::utils::key		   key(data_key);

  oln::image2d<ntg::int_u8> in = oln::load(rdata("lena256.pgm"));
  oln::coord R = in.nrows();
  oln::coord C = in.ncols();
  oln::level::set_level(in,
			oln::point2d(R * 1/4, C* 1/2),
			oln::point2d(R * 4/5, C* 7/8),
			0);
  oln::box<oln::point2d> b;
  b.add(oln::point2d(R * 1/6, C * 1/6));
  b.add(oln::point2d(R * 4/5, C * 1/3));
  oln::level::set_level(in, b, 255);
  if (oln::utils::md5(in) == key)
    std::cout << "OK" << std::endl;
  else
    {
      std::cout << "FAIL" << std::endl;
      return true;
    }
}
