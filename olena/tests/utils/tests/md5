//								    -*- c++ -*-
// Copyright (C) 2004  EPITA Research and Development Laboratory
//
// This file is part of the Olena Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License version 2 as published by the
// Free Software Foundation.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
// MA 02111-1307, USA.
//
// As a special exception, you may use this file as part of a free
// software library without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to
// produce an executable, this file does not by itself cause the
// resulting executable to be covered by the GNU General Public
// License.  This exception does not however invalidate any other
// reasons why the executable file might be covered by the GNU General
// Public License.

#include <ntg/int.hh>
#include <oln/basics2d.hh>
#include <oln/utils/md5.hh>

#include <iostream>

#include "check.hh"
#include "data.hh"

using namespace oln;
using namespace ntg;
using namespace utils;

#define OK_OR_FAIL				\
      std::cout << "OK" << std::endl;		\
    else					\
      {						\
	std::cout << "FAIL" << std::endl;	\
	fail = true;				\
      }

bool
check()
{
  bool				fail = false;
  oln::utils::key::value_type	data_ppm[16] = {0x47, 0xa5, 0xb6, 0xa2, 0xc8,
					    0xf1, 0x4d, 0xb8, 0x90, 0x67,
					    0xaa, 0x19, 0x3d, 0x43, 0xb6,
					    0xe0};
  key				lena_ppm(data_ppm);
  oln::utils::key::value_type	data_pgm[16] = {0xc7, 0xe4, 0x4, 0x4c, 0x32,
						0x1d, 0x2e, 0x3e, 0x5c, 0xbf,
						0x89, 0x8d, 0x3f, 0x94, 0x16,
						0xd5};
  key				lena_pgm(data_pgm);

  image2d<rgb_8>		src = load(rdata("lena.ppm"));
  image2d<int_u8>		src2 = load(rdata("lena.pgm"));


  std::cout << "MD5 on vectorial images: ";
  if (lena_ppm == md5(src))
    OK_OR_FAIL;
  std::cout << "MD5 on non vectorial images: ";
  if (lena_pgm == md5(src2))
    OK_OR_FAIL;

  return fail;
}
