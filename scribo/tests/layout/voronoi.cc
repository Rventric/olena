// Copyright (C) 2013 EPITA Research and Development Laboratory (LRDE)
//
// This file is part of Olena.
//
// Olena is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation, version 2 of the License.
//
// Olena is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Olena.  If not, see <http://www.gnu.org/licenses/>.
//
// As a special exception, you may use this file as part of a free
// software project without restriction.  Specifically, if other files
// instantiate templates or use macros or inline functions from this
// file, or you compile this file and link it with other files to produce
// an executable, this file does not by itself cause the resulting
// executable to be covered by the GNU General Public License.  This
// exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.

/// \file

#include <iostream>
#include <mln/io/pbm/load.hh>
#include <mln/make/box2d.hh>
#include <scribo/layout/voronoi.hh>

#include "tests/data.hh"

using namespace mln;

struct pt
{
  mln::util::vertex_id_t v1;
  mln::util::vertex_id_t v2;
};

static const pt ref[][8] = {
  { {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} , {0,0} },
  { { 1,2 }, { 1,8 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 1,2 }, { 2,3 }, { 2,8 }, { 2,14 }, { 2,21 }, { 2,28 }, {0,0}, {0,0} },
  { { 2,3 }, { 3,14 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 4,6 }, { 4,13 }, { 4,18 }, { 4,26 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 5,15 }, { 5,16 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 4,6 }, { 6,18 }, { 6,20 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 7,17 }, { 7,32 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 1,8 }, { 2,8 }, { 8,13 }, { 8,21 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 9,10 }, { 9,19 }, { 9,22 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 9,10 }, { 10,11 }, { 10,22 }, { 10,23 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 10,11 }, { 11,12 }, { 11,23 }, { 11,24 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 11,12 }, { 12,24 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 4,13 }, { 8,13 }, { 13,26 }, { 13,27 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 2,14 }, { 3,14 }, { 14,15 }, { 14,28 }, { 14,29 }, {0,0}, {0,0}, {0,0} },
  { { 5,15 }, { 14,15 }, { 15,16 }, { 15,29 }, { 15,30 }, {0,0}, {0,0}, {0,0} },
  { { 5,16 }, { 15,16 }, { 16,17 }, { 16,30 }, { 16,31 }, {0,0}, {0,0}, {0,0} },
  { { 7,17 }, { 16,17 }, { 17,31 }, { 17,32 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 4,18 }, { 6,18 }, { 18,20 }, { 18,25 }, { 18,26 }, {0,0}, {0,0}, {0,0} },
  { { 9,19 }, { 19,22 }, { 19,33 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 6,20 }, { 18,20 }, { 20,25 }, { 20,35 }, { 20,36 }, { 20,41 }, {0,0}, {0,0} },
  { { 2,21 }, { 8,21 }, { 21,27 }, { 21,28 }, { 21,43 }, { 21,44 }, {0,0}, {0,0} },
  { { 9,22 }, { 10,22 }, { 19,22 }, { 22,23 }, { 22,33 }, { 22,39 }, {0,0}, {0,0} },
  { { 10,23 }, { 11,23 }, { 22,23 }, { 23,24 }, { 23,39 }, { 23,40 }, {0,0}, {0,0} },
  { { 11,24 }, { 12,24 }, { 23,24 }, { 24,34 }, { 24,35 }, { 24,40 }, {0,0}, {0,0} },
  { { 18,25 }, { 20,25 }, { 25,26 }, { 25,36 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 4,26 }, { 13,26 }, { 18,26 }, { 25,26 }, { 26,27 }, { 26,36 }, { 26,37 }, {0,0} },
  { { 13,27 }, { 21,27 }, { 26,27 }, { 27,37 }, { 27,42 }, {0,0}, {0,0}, {0,0} },
  { { 2,28 }, { 14,28 }, { 21,28 }, { 28,29 }, { 28,44 }, {0,0}, {0,0}, {0,0} },
  { { 14,29 }, { 15,29 }, { 28,29 }, { 29,30 }, { 29,46 }, { 29,47 }, {0,0}, {0,0} },
  { { 15,30 }, { 16,30 }, { 29,30 }, { 30,31 }, { 30,38 }, { 30,47 }, {0,0}, {0,0} },
  { { 16,31 }, { 17,31 }, { 30,31 }, { 31,32 }, { 31,38 }, {0,0}, {0,0}, {0,0} },
  { { 7,32 }, { 17,32 }, { 31,32 }, { 32,38 }, { 32,45 }, { 32,48 }, {0,0}, {0,0} },
  { { 19,33 }, { 22,33 }, { 33,39 }, { 33,57 }, { 33,58 }, {0,0}, {0,0}, {0,0} },
  { { 24,34 }, { 34,35 }, { 34,40 }, { 34,49 }, { 34,56 }, {0,0}, {0,0}, {0,0} },
  { { 20,35 }, { 24,35 }, { 34,35 }, { 35,41 }, { 35,56 }, {0,0}, {0,0}, {0,0} },
  { { 20,36 }, { 25,36 }, { 26,36 }, { 36,37 }, { 36,41 }, { 36,51 }, {0,0}, {0,0} },
  { { 26,37 }, { 27,37 }, { 36,37 }, { 37,42 }, { 37,50 }, { 37,52 }, {0,0}, {0,0} },
  { { 30,38 }, { 31,38 }, { 32,38 }, { 38,47 }, { 38,48 }, { 38,55 }, {0,0}, {0,0} },
  { { 22,39 }, { 23,39 }, { 33,39 }, { 39,40 }, { 39,58 }, {0,0}, {0,0}, {0,0} },
  { { 23,40 }, { 24,40 }, { 34,40 }, { 39,40 }, { 40,49 }, { 40,58 }, {0,0}, {0,0} },
  { { 20,41 }, { 35,41 }, { 36,41 }, { 41,51 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 27,42 }, { 37,42 }, { 42,43 }, { 42,50 }, { 42,53 }, {0,0}, {0,0}, {0,0} },
  { { 21,43 }, { 42,43 }, { 43,44 }, { 43,53 }, { 43,59 }, {0,0}, {0,0}, {0,0} },
  { { 21,44 }, { 28,44 }, { 43,44 }, { 44,46 }, { 44,54 }, {0,0}, {0,0}, {0,0} },
  { { 32,45 }, { 45,48 }, { 45,63 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 29,46 }, { 44,46 }, { 46,47 }, { 46,54 }, { 46,60 }, { 46,61 }, {0,0}, {0,0} },
  { { 29,47 }, { 30,47 }, { 38,47 }, { 46,47 }, { 47,61 }, {0,0}, {0,0}, {0,0} },
  { { 32,48 }, { 38,48 }, { 45,48 }, { 48,55 }, { 48,63 }, {0,0}, {0,0}, {0,0} },
  { { 34,49 }, { 40,49 }, { 49,56 }, { 49,58 }, { 49,75 }, {0,0}, {0,0}, {0,0} },
  { { 37,50 }, { 42,50 }, { 50,52 }, { 50,53 }, { 50,66 }, {0,0}, {0,0}, {0,0} },
  { { 36,51 }, { 41,51 }, { 51,52 }, { 51,69 }, { 51,72 }, {0,0}, {0,0}, {0,0} },
  { { 37,52 }, { 50,52 }, { 51,52 }, { 52,66 }, { 52,72 }, {0,0}, {0,0}, {0,0} },
  { { 42,53 }, { 43,53 }, { 50,53 }, { 53,59 }, { 53,77 }, {0,0}, {0,0}, {0,0} },
  { { 44,54 }, { 46,54 }, { 54,59 }, { 54,60 }, { 54,65 }, { 54,67 }, {0,0}, {0,0} },
  { { 38,55 }, { 48,55 }, { 55,61 }, { 55,62 }, { 55,63 }, {0,0}, {0,0}, {0,0} },
  { { 34,56 }, { 35,56 }, { 49,56 }, { 56,69 }, { 56,75 }, { 56,76 }, {0,0}, {0,0} },
  { { 33,57 }, { 57,58 }, { 57,73 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 33,58 }, { 39,58 }, { 40,58 }, { 49,58 }, { 57,58 }, { 58,73 }, { 58,74 }, { 58,75 } },
  { { 43,59 }, { 53,59 }, { 54,59 }, { 59,65 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 46,60 }, { 54,60 }, { 60,61 }, { 60,67 }, { 60,70 }, {0,0}, {0,0}, {0,0} },
  { { 46,61 }, { 47,61 }, { 55,61 }, { 60,61 }, { 61,62 }, { 61,70 }, { 61,71 }, {0,0} },
  { { 55,62 }, { 61,62 }, { 62,63 }, { 62,71 }, { 62,79 }, { 62,80 }, {0,0}, {0,0} },
  { { 45,63 }, { 48,63 }, { 55,63 }, { 62,63 }, { 63,64 }, { 63,68 }, { 63,80 }, {0,0} },
  { { 63,64 }, { 64,68 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 54,65 }, { 59,65 }, { 65,67 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 50,66 }, { 52,66 }, { 66,72 }, { 66,77 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 54,67 }, { 60,67 }, { 65,67 }, { 67,70 }, { 67,78 }, {0,0}, {0,0}, {0,0} },
  { { 63,68 }, { 64,68 }, { 68,80 }, { 68,81 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 51,69 }, { 56,69 }, { 69,76 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 60,70 }, { 61,70 }, { 67,70 }, { 70,71 }, { 70,78 }, {0,0}, {0,0}, {0,0} },
  { { 61,71 }, { 62,71 }, { 70,71 }, { 71,79 }, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 51,72 }, { 52,72 }, { 66,72 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 57,73 }, { 58,73 }, { 73,74 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 58,74 }, { 73,74 }, { 74,75 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 49,75 }, { 56,75 }, { 58,75 }, { 74,75 }, { 75,76 }, {0,0}, {0,0}, {0,0} },
  { { 56,76 }, { 69,76 }, { 75,76 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 53,77 }, { 66,77 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 67,78 }, { 70,78 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 62,79 }, { 71,79 }, { 79,80 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
  { { 62,80 }, { 63,80 }, { 68,80 }, { 79,80 }, { 80,81 }, {0,0}, {0,0}, {0,0} },
  { { 68,81 }, { 80,81 }, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} },
};


int main()
{

  image2d<bool> input;
  io::pbm::load(input, SCRIBO_IMG_DIR "/alignment_3.pbm");
  util::graph g = scribo::layout::voronoi(input);

  mln_assertion(g.v_nmax() == 82);

  mln_vertex_iter_(util::graph) v(g);
  mln_vertex_nbh_edge_iter_(util::graph) n(v);
  for_all(v)
  {
    int edge_id = 0;
    for_all(n)
    {
      mln_assertion(ref[v][edge_id].v1 != 0 && ref[v][edge_id].v2 != 0);
      mln_assertion(ref[v][edge_id].v1 == n.v1());
      mln_assertion(ref[v][edge_id].v2 == n.v2());
      ++edge_id;
    }
  }
}
