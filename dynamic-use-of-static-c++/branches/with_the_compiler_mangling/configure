#!/usr/bin/env ruby

require 'pathname'
require 'rbconfig'
require 'erb'

TOP_DIR = Pathname.new(__FILE__).dirname

class Configure
  def initialize ( &block )
    return unless $0 == __FILE__
    @patt = {}
    instance_eval(&block)
    do_gsub
    puts "Configuring: done."
  end
  def gsub ( name, val=get(name.to_s) )
    @patt[((name.is_a? Regexp)? name : "@@#{name}@@")] = val
  end
  def do_gsub
    Pathname.glob(TOP_DIR + '**/*.in').each do |path|
      puts path
      contents = path.read
      @patt.each { |patt, val| contents.gsub! patt, val }
      contents = ERB.new(contents, nil, '<-%->', '$erbout_').result
      Pathname.new(path.to_s.sub(/\.in$/, '')).open('w') { |f| f.puts contents }
    end
  end
  def get ( name )
    Config::CONFIG[name] || eval(name)
  end
  def erb ( file )
    result = ERB.new(file.read, nil, '<-%->', '$erbout_').result
    Pathname.new(file.to_s.sub(/\.erb\./, '.')).open('w') { |f| f.puts result }
  end
end
Kernel.send :undef_method, :gsub

NB_MAX_ARGUMENTS = 10

DYNDIR = TOP_DIR.expand_path + 'src'
SRCDIR = TOP_DIR + 'src'
LIBDIR = TOP_DIR + 'lib'
BIN = TOP_DIR.expand_path + 'bin'
TESTDIR = TOP_DIR.expand_path + 'test'

SWIGDIR = TOP_DIR.expand_path + 'test/swig'
SWIG = SWIGDIR + 'swig'
SWIGINCLUDES = "-I#{SWIGDIR}/Lib -I#{SWIGDIR}/Lib/python"

VCSN = TESTDIR + 'vaucanson/sources'

# Make the proper to the olena-proto-stl-style in test
OLENA_PROTO_STL_STYLE = TESTDIR + 'olena/proto-stl-style'

CXX = 'ccache g++'

INCLUDE_DIRS = [Config::CONFIG['topdir'], OLENA_PROTO_STL_STYLE]

CFLAGS = '-DDYNDEBUG -DCOMPILER_DEMANGLING -ggdb -W -Wall ' + INCLUDE_DIRS.map{|x|'-I' + x}.join(' ')
LDFLAGS = LIBDIR.to_s +
  case RUBY_PLATFORM
    when /darwin/ then '/libiberty-macos.a'
    when /linux/  then '/libiberty-linux.a'
  end
SHARED =
  case RUBY_PLATFORM
    when /darwin/ then '-bundle'
    when /linux/  then '-shared'
  end


Configure.new do
  gsub :SRCDIR
  gsub :DYNDIR
  gsub :LDSHARED
  gsub :LIBRUBYARG
  gsub :LIBRUBYARG_SHARED
  gsub :CXX
  gsub :CFLAGS, CFLAGS
  gsub :LDFLAGS, LDFLAGS
  gsub :SWIGDIR
  gsub :SWIG
  gsub :SWIGINCLUDES
  gsub :BIN
  gsub :VCSN
  erb SRCDIR + 'data.erb.hh'
  erb SRCDIR + 'data.erb.hxx'
  erb SRCDIR + 'function.erb.hh'
  erb SRCDIR + 'function.erb.hxx'
  system("touch #{SRCDIR + 'data_gen.hh'}")
end
