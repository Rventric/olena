							// -*- C++ -*-
#include "data.hh"
#include <oln/utils/md5.hh>
#include <iostream>
#include <oln/io/read_image.hh>
#include <oln/basics2d.hh>
#include <oln/core/gen/image_with_nbh.hh>
#include <oln/morpho/opening.hh>
#include <oln/morpho/geodesic_dilation.hh>
#include <ntg/all.hh>

using namespace oln;

bool check()
{
  // MD5 sum of object.pbm's geodesic dilation result.
  // FIXME: Replace this fake with the actual result.
  utils::key::value_type   data_key[16] =
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  utils::key key(data_key);

  typedef image2d<ntg::bin> im_type;

  neighborhood2d nbh(neighb_c4());

  im_type marker;
  im_type mask;

  mask = io::read(rdata("object.pbm"));
  marker = morpho::opening(mask, win_c4p()).exact();

  // Classical procedure.
  if (utils::md5(morpho::proc::geodesic_dilation(join(marker, nbh),
						 mask).exact()) != key)
    return true;

  // Facade to object-algorithm.
  if (utils::md5(morpho::geodesic_dilation(join(marker, nbh),
					   mask).exact()) != key)
    return true;

  return false;
}
