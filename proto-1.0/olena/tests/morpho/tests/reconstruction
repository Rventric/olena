// -*- C++ -*-

#include "data.hh"
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/core/gen/image_with_nbh.hh>

#include <oln/morpho/reconstruction.hh>

#include <oln/io/read_image.hh>

#include <oln/level/compare.hh>
#include <oln/utils/md5.hh>
#include <oln/level/invert.hh>

// FIXME: Debug.
#include <oln/io/write_image.hh>

bool check()
{
  using namespace oln;
  image2d<ntg::bin> marker;
  image2d<ntg::bin> mask;
  image_with_nbh<image2d<ntg::bin>, neighborhood2d> res_dil_hyb;
  image_with_nbh<image2d<ntg::bin>, neighborhood2d> res_dil_seq;
  image_with_nbh<image2d<ntg::bin>, neighborhood2d> res_ero_hyb;
  image_with_nbh<image2d<ntg::bin>, neighborhood2d> res_ero_seq;

  utils::key::value_type data_key[16] =
    { 0xd1, 0x5c, 0x13, 0xd8, 0xe0, 0xa8, 0x58, 0x7d,
      0xc8, 0xc, 0x6c, 0xc9, 0x78, 0xca, 0x37, 0xc6 };
  utils::key key(data_key);

  marker = io::read(rdata("marker.pbm"));
  mask = io::read(rdata("mask.pbm"));

  res_dil_hyb =
    morpho::reconstruction(join(marker, neighb_c4()),
			   mask,
			   morpho::tag::hybrid(),
			   morpho::tag::by_dilation());
  // FIXME: The sequential reconstruction is broken, and the test
  // doesn't terminate if we compute res_dil_seq.
//   res_dil_seq =
//     morpho::reconstruction(join(marker, neighb_c4()),
// 			   mask,
// 			   morpho::tag::sequential(),
// 			   morpho::tag::by_dilation());

  image2d<ntg::bin> marker_c(level::invert(marker));
  res_ero_hyb =
    morpho::reconstruction(join(marker_c, neighb_c4()),
			   level::invert(mask),
			   morpho::tag::hybrid(),
			   morpho::tag::by_erosion());
  // FIXME: Likewise.
//   res_ero_seq =
//     morpho::reconstruction(join(marker_c, neighb_c4()),
// 			   level::invert(mask),
// 			   morpho::tag::sequential(),
// 			   morpho::tag::by_erosion());

  // FIXME: Debug.
  std::cerr << utils::md5(res_dil_hyb) << std::endl;
  io::write(res_dil_hyb, "/tmp/res_dil_hyb.pbm");
//   std::cerr << utils::md5(res_dil_seq) << std::endl;
  std::cerr << utils::md5(res_ero_hyb) << std::endl;
//   std::cerr << utils::md5(res_ero_seq) << std::endl;

  if (utils::md5(res_dil_hyb) != key)
    return true;
  // FIXME: Likewise.
//   if (!level::is_equal(res_dil_hyb, res_dil_seq))
//     return true;
//   if (!level::is_equal(res_ero_hyb, res_ero_seq))
//     return true;
//   if (!level::is_equal(res_dil_hyb, level::invert(res_ero_seq)))
//     return true;

  return false;
}
