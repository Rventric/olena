// -*- C++ -*-

#include "data.hh"
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/core/gen/image_with_nbh.hh>

#include <oln/morpho/reconstruction.hh>

#include <oln/io/read_image.hh>
#include <oln/io/write_image.hh>

#include <oln/level/compare.hh>
#include <oln/utils/md5.hh>
#include <oln/utils/invert.hh>

bool check()
{
  using namespace oln;
  image2d<ntg::bin> marker;
  image2d<ntg::bin> mask;
  image2d<ntg::bin> res_dil_hyb;
  image2d<ntg::bin> res_dil_seq;
  image2d<ntg::bin> res_ero_hyb;
  image2d<ntg::bin> res_ero_seq;

  utils::key::value_type   data_key[16] =
    {
      0x36, 0xa6, 0x2e, 0x7e, 0xbf, 0x21, 0xf6, 0x2b,
      0xbf, 0x57, 0x58, 0xdc, 0x9d, 0x72, 0x41, 0x8f
    };
  utils::key key(data_key);

  marker = io::read(rdata("marker.pbm"));
  mask = io::read(rdata("mask.pbm"));

  res_dil_hyb = morpho::reconstruction(tag::by_dilation(),
				       join(marker, neighb_c4()),
				       mask,
				       tag::hybrid());
  res_dil_seq = morpho::reconstruction(tag::by_dilation(),
				       join(marker, neighb_c4()),
				       mask,
				       tag::sequential());

  res_ero_hyb = morpho::reconstruction(tag::by_erosion(),
				       utils::invert(join(marker, neighb_c4())),
				       utils::invert(mask),
				       tag::hybrid());
  res_ero_seq = morpho::reconstruction(tag::by_erosion(),
				       utils::invert(join(marker, neighb_c4())),
				       utils::invert(mask),
				       tag::sequential());

  if (utils::md5(res_dil_hyb) != key)
    return true;
  if (!level::is_equal(res_dil_hyb, res_dil_seq))
    return true;
  if (!level::is_equal(res_ero_hyb, res_ero_seq))
    return true;
  if (!level::is_equal(res_dil_hyb, utils::invert(res_ero_seq)))
    return true;

  return false;
}
