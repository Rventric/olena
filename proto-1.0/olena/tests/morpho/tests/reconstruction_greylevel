// -*- C++ -*-

#include "data.hh"
#include <oln/basics2d.hh>
#include <ntg/all.hh>

#include <oln/core/gen/image_with_nbh.hh>

#include <oln/morpho/reconstruction.hh>

#include <oln/io/read_image.hh>

#include <oln/level/compare.hh>
#include <oln/utils/md5.hh>
#include <oln/level/invert.hh>

// FIXME: Debug.
#include <oln/io/write_image.hh>

bool check()
{
  using namespace oln;
  image2d<unsigned char> marker;
  image2d<unsigned char> mask;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_dil_hyb;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_dil_seq;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_dil_par;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_ero_hyb;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_ero_seq;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_ero_par;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_selfdual;
  image_with_nbh<image2d<unsigned char>, neighborhood2d> res_selfdual_invert;

  utils::key::value_type data_key[16] =
    {0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x0, 0xb2, 0x4,
     0xe9, 0x80, 0x9, 0x98, 0xec, 0xf8, 0x42, 0x7e};
  utils::key key(data_key);

  marker = io::read(rdata("marker.pgm"));
  mask = io::read(rdata("mask.pgm"));

  res_dil_hyb =
    morpho::reconstruction(join(marker, neighb_c4()),
			   mask,
			   morpho::tag::hybrid(),
			   morpho::tag::by_dilation());
  res_dil_seq =
    morpho::reconstruction(join(marker, neighb_c4()),
			   mask,
			   morpho::tag::sequential(),
			   morpho::tag::by_dilation());

  res_dil_par =
    morpho::reconstruction(join(marker, neighb_c4()),
			   mask,
			   morpho::tag::parallel(),
			   morpho::tag::by_dilation());

  image2d<unsigned char> marker_c(level::invert(marker));

  res_ero_hyb =
    morpho::reconstruction(join(marker_c, neighb_c4()),
			   level::invert(mask),
			   morpho::tag::hybrid(),
			   morpho::tag::by_erosion());
  res_ero_seq =
    morpho::reconstruction(join(marker_c, neighb_c4()),
			   level::invert(mask),
			   morpho::tag::sequential(),
			   morpho::tag::by_erosion());

  res_ero_par =
    morpho::reconstruction(join(marker_c, neighb_c4()),
			   level::invert(mask),
			   morpho::tag::parallel(),
			   morpho::tag::by_erosion());

  res_selfdual =
    morpho::reconstruction_selfdual(join(marker, neighb_c4()),
				    mask);

  res_selfdual_invert =
    morpho::reconstruction_selfdual(join(marker_c, neighb_c4()),
				    level::invert(mask));

  if (utils::md5(res_dil_hyb) != key)
    return true;


  if (!level::is_equal(res_dil_hyb, res_dil_seq))
    return true;
  if (!level::is_equal(res_ero_hyb, res_ero_seq))
    return true;
  if (!level::is_equal(res_dil_hyb, res_dil_par))
    return true;
  if (!level::is_equal(res_ero_hyb, res_ero_par))
    return true;
  if (!level::is_equal(res_selfdual, level::invert(res_selfdual_invert)))
    return true;
  if (!level::is_equal(res_dil_hyb, level::invert(res_ero_seq)))
    return true;

  return false;
}


