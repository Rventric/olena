							// -*- C++ -*-
#include "data.hh"
#include <oln/utils/md5.hh>

#include <ntg/int.hh>
#include <oln/core/2d/image2d.hh>
#include <oln/core/gen/image_with_nbh.hh>
#include <oln/io/read_image.hh>
#include <oln/level/extrema_components.hh>

using namespace oln;

bool check()
{
  image2d<ntg::int_u8> raw_input;
  raw_input = io::read(rdata("16x16.pgm"));
  typedef image_with_nbh<image2d<ntg::int_u8>, neighborhood2d> image_type;
  image_type input = join(raw_input, neighb_c4());

  // MD5 sum of the minima.
  utils::key::value_type minima_data_key[16] =
    { 0x72, 0xad, 0x21, 0xcc, 0xd9, 0x6a, 0x6a, 0x82,
      0xb8, 0xea, 0x60, 0x1f, 0xcf, 0x76, 0x45, 0x13 };
  utils::key minima_key(minima_data_key);

  image_type minima = level::minima_components<ntg::int_u8>(input);
  if (utils::md5(minima) != minima_key)
    return true;

  // MD5 sum of the maxima.
  utils::key::value_type maxima_data_key[16] =
    { 0x6e, 0x71, 0x74, 0x7c, 0xf8, 0xb, 0xfe, 0xa,
      0xa9, 0xd2, 0x84, 0x26, 0xa5, 0x3e, 0xfd, 0xba };
  utils::key maxima_key(maxima_data_key);

  image_type maxima = level::maxima_components<ntg::int_u8>(input);
  if (utils::md5(maxima) != maxima_key)
    return true;

  return false;
}
